/// <reference types="micromatch" />
import micromatch = require('micromatch');
import { IOptions } from '../../managers/options';
import { FilterFunction } from '@mrmlnc/readdir-enhanced';
import { Pattern } from '../../types/patterns';
export default class DeepFilter {
    private readonly options;
    private readonly micromatchOptions;
    constructor(options: IOptions, micromatchOptions: micromatch.Options);
    /**
     * Returns filter for directories.
     */
    getFilter(positive: Pattern[], negative: Pattern[]): FilterFunction;
    /**
     * Returns true if directory must be read.
     */
    private filter(entry, negativeRe, depth);
    /**
     * Returns max depth for reading.
     */
    private getMaxDeth(positive);
    /**
     * Returns true for dot directories if the «dot» option is enabled.
     */
    private isFollowedDotDirectory(entry);
    /**
     * Returns true for symlinked directories if the «followSymlinks» option is enabled.
     */
    private isFollowedSymlink(entry);
    /**
     * Returns true when the «deep» options is number and entry depth greater that the option value.
     */
    private skipByDeepOption(entry);
    /**
     * Return true when depth parameter is not an Infinity and entry depth greater that the parameter value.
     */
    private skipByPatternDepth(entry, depth);
}
